#include <stdio.h>


int main(int argc, char const *argv[])
{
    int && r_ref = 23; // 为什么说右值引用能延长将亡值的生命周期? 很显然在栈上开辟了空间而已

    int i = 23;
    int & l_ref = i; // 左值引用实际上是栈上的一个指针, 这个指针绑定了已经存在栈上的变量

    // 左值引用和右值引用的区别在于
    // 左值引用的引用对象是已经存在于栈上的对象, 已经有内存地址了
    // 右值引用的引用对象会先拷贝到栈上, 然后将拷贝后的地址赋值到右值引用的栈上地址
    r_ref = 25;
    l_ref = 24;
    return 0;
}
